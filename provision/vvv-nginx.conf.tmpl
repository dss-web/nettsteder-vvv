server {
    listen       80;
    listen       443 ssl;
    server_name  {{DOMAINS_HERE}};
    root         {vvv_path_to_site}/public_html;

    error_log    {vvv_path_to_site}/log/error.log;
    access_log   {vvv_path_to_site}/log/access.log;

    set          $upstream {upstream};

	if (!-e $request_filename) {

	        # Add trailing slash to */wp-admin requests.
	        rewrite /wp-admin$ $scheme://$host$uri/ permanent;

	        # WordPress is in a subdir
	        rewrite (/wp-.*) /wp$1 last;
	        rewrite (/.*\.php)$ /wp$1 last;

	        # Yoast SEO Sitemap
	        rewrite ^/sitemap_index\.xml$ /index.php?sitemap=1 last;
	        rewrite ^/([^/]+?)-sitemap([0-9]+)?\.xml$ /index.php?sitemap=$1&sitemap_n=$2 last;
	}

	location / {
		# WordPress is in a subdir
	    try_files $uri $uri/ /wp/index.php?$args;
	}

	# location ~ \.php$ {
	#
	# 	# WordPress is in a subdir
	#     try_files $uri /wp/index.php;
	# }


	# Specify a charset
	charset utf-8;

	# Weird things happened to me when I had gzip on, may need to try
	# again in the future as it could have been related to many other
	# factors - JF
	gzip off;

	# # Add trailing slash to */wp-admin requests.
	# rewrite /wp-admin$ $scheme://$host$uri/ permanent;

	# this prevents hidden files (beginning with a period) from being served
	location ~ /\. {
	    access_log off;
	    log_not_found off;
	    deny all;
	}

	# Pass uploaded files to wp-includes/ms-files.php.
	rewrite /files/$ /index.php last;

	if ($uri !~ wp-content/plugins) {
	    rewrite /files/(.+)$ /wp-includes/ms-files.php?file=$1 last;
	}

	# # Rewrite multisite in a subdirectory '.../wp-.*' and '.../*.php'.
	# if (!-e $request_filename) {
	#     rewrite ^/[_0-9a-zA-Z-]+(/wp-.*) $1 last;
	#     rewrite ^/[_0-9a-zA-Z-]+.*(/wp-admin/.*\.php)$ $1 last;
	#     rewrite ^/[_0-9a-zA-Z-]+(/.*\.php)$ $1 last;
	# }

	location ~ \.php$ {

		# WordPress is in a subdir
		try_files $uri /wp/index.php;

	    # # Try the files specified in order. In our case, try the requested URI and if
	    # # that fails, try (successfully) to pass a 404 error.
	    # try_files      $uri =404;

	    # Include the fastcgi_params defaults provided by nginx
	    include        /etc/nginx/fastcgi_params;

	    # The amount of time for upstream to wait for a fastcgi process to send data.
	    # We keep this *extremely* high so that one can be lazy when remote debugging.
	    fastcgi_read_timeout 3600s;

	    # Buffer size for reading the header of the backend FastCGI process.
	    # This defaults to the value of a single fastcgi_buffers, so does not
	    # need to be specified in our case, but it's good to be explicit.
	    fastcgi_buffer_size 128k;

	    # The number and size of the buffers into which the reply from the FastCGI
	    # process in the backend is read.
	    #
	    # 4 buffers at 128k means that any reply by FastCGI greater than 512k goes
	    # to disk and replies under 512k are handled directly in memory.
	    fastcgi_buffers 4 128k;

	    # SCRIPT_FILENAME is a required parameter for things to work properly,
	    # but was missing in the default fastcgi_params on upgrade to nginx 1.4.
	    # We define it here to be sure that it exists.
	    fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

	    # Use the upstream defined in the upstream variable.
	    fastcgi_pass   $upstream;

	    # And get to serving the file!
	    fastcgi_index  index.php;
	}

}
